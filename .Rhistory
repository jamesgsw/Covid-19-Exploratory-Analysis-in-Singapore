qqline(act_scores, col = "steelblue", lwd = 2)
#Qs 6
act_scores = c(24:00, 28:00, 27:75, 27:00, 24:25, 23:50, 26:25, 24:00, 25:00, 30:00, 23:25, 26:25, 21:50, 26:00, 28:00, 24:50, 22:50, 28:25, 21:25, 19:75)
qqnorm_act_scores = qqnorm(act_scores, main="Q-Q Plot of ACT Scores vs. Normal Distribution")
abline(lm(yx, data=qqnorm_act_scores)) # Adds straight line using linear regression
abline(lm(y~x, data=qqnorm_act_scores)) # Adds straight line using linear regression
#Qs 6
act_scores = c(24:00, 28:00, 27:75, 27:00, 24:25, 23:50, 26:25, 24:00, 25:00, 30:00, 23:25, 26:25, 21:50, 26:00, 28:00, 24:50, 22:50, 28:25, 21:25, 19:75)
qqnorm_act_scores = qqnorm(act_scores, main="Q-Q Plot of ACT Scores vs. Normal Distribution")
abline(lm(y~x, data=qqnorm_act_scores)) # Adds straight line using linear regression
pch = 1
pch = 1
pch = 1
#Qs 6
act_scores = c(24:00, 28:00, 27:75, 27:00, 24:25, 23:50, 26:25, 24:00, 25:00, 30:00, 23:25, 26:25, 21:50, 26:00, 28:00, 24:50, 22:50, 28:25, 21:25, 19:75)
qqnorm(act_scores, pch = 1, frame = FALSE)
qqline(act_scores, col = "steelblue", lwd = 2)
#Qs 6
act_scores = c(24:00, 28:00, 27:75, 27:00, 24:25, 23:50, 26:25, 24:00, 25:00, 30:00, 23:25, 26:25, 21:50, 26:00, 28:00, 24:50, 22:50, 28:25, 21:25, 19:75)
qqnorm(act_scores)
qqline(act_scores, col=2)
#Qs 6
act_scores <- c(24:00, 28:00, 27:75, 27:00, 24:25, 23:50, 26:25, 24:00, 25:00, 30:00, 23:25, 26:25, 21:50, 26:00, 28:00, 24:50, 22:50, 28:25, 21:25, 19:75)
qqnorm(act_scores)
qqline(act_scores, col=2)
#Qs 6
act_scores <- c(24:00, 28:00, 27:75, 27:00, 24:25, 23:50, 26:25, 24:00, 25:00, 30:00, 23:25, 26:25, 21:50, 26:00, 28:00, 24:50, 22:50, 28:25, 21:25, 19:75)
qqnorm(act_scores);
qqline(act_scores, col=2)
#Qs 6
act_scores <- c(24.00, 28.00, 27.75, 27.00, 24.25, 23.50, 26.25, 24.00, 25.00, 30.00, 23.25, 26.25, 21.50, 26.00, 28.00, 24.50, 22.50, 28.25, 21.25, 19.75)
qqnorm(act_scores);
qqline(act_scores, col=2)
mean(act_scores)
sd(act_scores)
len(act_scores)
length(act_scores)
t_alpha_3 =qt(1-0.025, 19)
length(act_scores)
t_alpha_3 =qt(1-0.025, 19)
#Lower Interval
mean_qs_6 - t_alpha_3*(sd_qs_6/(20)**0.5)
#Upper Interval
mean_qs_6 + t_alpha_3*(sd_qs_6/(20)**0.5)
qqline(act_scores, col=2)
mean_qs_6 = mean(act_scores)
sd_qs_6 = sd(act_scores)
length(act_scores)
t_alpha_3 =qt(1-0.025, 19)
#Lower Interval
mean_qs_6 - t_alpha_3*(sd_qs_6/(20)**0.5)
#Upper Interval
mean_qs_6 + t_alpha_3*(sd_qs_6/(20)**0.5)
#t test statistic
(mean_qs_6 - 21)/(sd_qs_6/20**0.5)
#t test statistic
(mean_qs_6 - 21)/(sd_qs_6/20**0.5)
t_alpha_4 =qt(1-0.05, 19)
t_alpha_4
t_alpha_4 =qt(0.05, 19)
t_alpha_4
#t test statistic
(mean_qs_6 - 21)/(sd_qs_6/20**0.5)
t_alpha_4 =qt(1-0.05, 19)
t_alpha_4
#Qs 7
qnorm(1)
#Qs 7
pnorm(1)
#Qs 7
1- pnorm(1)
#Qs 7
1- pnorm(2)
#Qs 7
1- pnorm(3)
qnorm(0.01)
#Qs 7
1- pnorm(2.0213)
#part(b)
1- pnorm(1000/(1500/16**0.5)) + qnorm(0.01)
#part(b)
(1- pnorm(1000/(1500/16**0.5))) + qnorm(0.01)
#part(b)
(1- pnorm(1000/(1500/16**0.5))) + qnorm(0.99)
#part(b)
(1- pnorm(-1000/(1500/16**0.5))) + qnorm(0.99)
#part(b)
(1- pnorm(-1000/(1500/sqrt(16))) + qnorm(0.99)
#part(b)
(1- pnorm(-1000/(1500/4))) + qnorm(0.99)
#part(b)
(1- pnorm(-1000/(1500/4))) + qnorm(0.99)
#part(b)
1- pnorm(-1000/(1500/4)) + qnorm(0.99)
#part(b)
1- pnorm(-1000/(1500/4)) + qnorm(0.99)
#part(b)
1- pnorm(-1000/(1500/4)) + qnorm(0.99))
#part(b)
1- pnorm(-1000/(1500/4) + qnorm(0.99))
#part(b)
x = 1- pnorm(-1000/(1500/4) + qnorm(0.99))
1- x
#part(b)
beta = 1- pnorm(-1000/(1500/4) + qnorm(0.99))
print(beta)
power = 1 - beta
print(power)
#part(c)
qnorm(0.1)
#part(c)
pnorm(0.1)
#part(c)
qnorm(0.1)
#part(c)
qnorm(0.1) - qnorm(0.99)
#part(c)
((qnorm(0.1) - qnorm(0.99))/(2/3))**2
#Qs 9
method_1 -> c(12.0129, 12.0072, 12.0064, 12.0054, 12.0016, 11.9853, 11.9949, 11.9985, 12.0077, 12.0061)
method_2 -> c(12.0318, 12.0246, 12.0069, 12.0006, 12.0075)
#Qs 9
method_1 -> c(12.0129, 12.0072, 12.0064, 12.0054, 12.0016, 11.9853, 11.9949, 11.9985, 12.0077, 12.0061)
method_2 -> c(12.0318, 12.0246, 12.0069, 12.0006, 12.0075)
#Qs 9
method_1 = c(12.0129, 12.0072, 12.0064, 12.0054, 12.0016, 11.9853, 11.9949, 11.9985, 12.0077, 12.0061)
method_2 = c(12.0318, 12.0246, 12.0069, 12.0006, 12.0075)
mean(method_1)
mean(method_2)
sp = (((9/13)* sd1**2) + ((4/13)*sd2**2))**0.5
m1 = mean(method_1)
m2 = mean(method_2)
sd1 = sd(method_1)
sd2 = sd(method_2)
sp = (((9/13)* sd1**2) + ((4/13)*sd2**2))**0.5
#lower interval
m1 - m2 - qt(0.025, 14)*sp*(3/10)**0.5
#Upper Interval
m1 - m2 + qt(0.025, 14)*sp*(3/10)**0.5
#Lower interval
m1 - m2 - qt(1-0.025, 14)*sp*(3/10)**0.5
#Upper Interval
m1 - m2 + qt(1-0.025, 14)*sp*(3/10)**0.5
#Part(b)
sd_compiled = ((sd1**2)/10+(sd2**2)/5)**0.5
v = (w1+w2)**2/((w1**2)/(9)+(w2**2)/4)
#Part(b)
w1 = (sd1**2)/10
w2 = (sd2**2)/5
v = (w1+w2)**2/((w1**2)/(9)+(w2**2)/4)
floor(v)
#Lower Interval
m1 - m2 - qt(0.05, v)*sd_compiled
#Lower Interval
m1 - m2 - qt(0.05, v)*sd_compiled
#Upper Interval
m1 - m2 + qt(0.05, v)*sd_compiled
#Lower Interval
m1 - m2 - qt(1-0.025, v)*sd_compiled
#Upper Interval
m1 - m2 + qt(1-0.025, v)*sd_compiled
qnorm(0.75)
#Qs 9
method_1 = c(12.0129, 12.0072, 12.0064, 12.0054, 12.0016, 11.9853, 11.9949, 11.9985, 12.0077, 12.0061)
method_2 = c(12.0318, 12.0246, 12.0069, 12.0006, 12.0075)
m1 = mean(method_1)
m2 = mean(method_2)
sd1 = sd(method_1)
sd2 = sd(method_2)
#Part(a)
sp = (((9/13)* sd1**2) + ((4/13)*sd2**2))**0.5
#Lower interval
m1 - m2 - qt(1-0.025, 14)*sp*(3/10)**0.5
#Upper Interval
m1 - m2 + qt(1-0.025, 14)*sp*(3/10)**0.5
#Part(b)
w1 = (sd1**2)/10
w2 = (sd2**2)/5
v = (w1+w2)**2/((w1**2)/(9)+(w2**2)/4)
floor(v)
v = floor(v)
sd_compiled = (w1+w2)**0.5
#Lower Interval
m1 - m2 - qt(1-0.025, v)*sd_compiled
#Upper Interval
m1 - m2 + qt(1-0.025, v)*sd_compiled
sd_compiled = (w1+w2)**0.5
#Lower Interval
m1 - m2 - qt(1-0.025, v)*sd_compiled
#Upper Interval
m1 - m2 + qt(1-0.025, v)*sd_compiled
#Qs 10
RRU=qf(0.975,8,8)
RRL=qf(0.025,8,8)
1-pf(RRU/2,8,8)+pf(RRL/2,8,8)
#Qs 10
f_test_statistic = qf(0.025,8,8)
#Lower Interval
1/f_test_statistic * ((2.3**2)/(1/1**2))
#Upper Interval
f_test_statistic * ((2.3**2)/(1/1**2))
#Qs 10
f_test_statistic = qf(0.05,8,8)
#Lower Interval
1/qf(1-0.05,8,8) * ((2.3**2)/(1/1**2))
#Upper Interval
qf(0.05,8,8) * ((2.3**2)/(1/1**2))
#Lower Interval
1/qf(0.05,8,8) * ((2.3**2)/(1/1**2))
#Upper Interval
qf(1-0.05,8,8) * ((2.3**2)/(1/1**2))
#Lower Interval
1-qf(0.05,8,8)
#Lower Interval
(1/qf(0.05,8,8)) * ((2.3**2)/(1/1**2))
#Upper Interval
qf(0.05,8,8) * ((2.3**2)/(1/1**2))
#Lower Interval
(qf(1-0.05,8,8)) * ((2.3**2)/(1/1**2))
#Upper Interval
qf(0.05,8,8) * ((2.3**2)/(1/1**2))
#Lower Interval
(qf(1-0.05,8,8)) * ((2.3**2)/(1.1**2))
#Upper Interval
qf(0.05,8,8) * ((2.3**2)/(1.1**2))
#Lower Interval
pf(1-0.05,8,8)) * ((2.3**2)/(1.1**2)
#Upper Interval
pf(0.05,8,8) * ((2.3**2)/(1.1**2))
#Lower Interval
pf(0.05,8,8)) * ((2.3**2)/(1.1**2)
#Upper Interval
pf(0.05,8,8) * ((2.3**2)/(1.1**2))
#Lower Interval
pf(0.05,8,8) * ((2.3**2)/(1.1**2))
#Upper Interval
pf(0.05,8,8) * ((2.3**2)/(1.1**2))
#Upper Interval
qf(0.05,8,8) * ((2.3**2)/(1.1**2))
RRU=qf(0.975,8,8)
qf(0.05,8,8) * ((2.3**2)/(1.1**2))
qf(0.05,8,8) * ((2.3**2)/(1.1**2))
#Lower Interval
qf(0.05,8,8) * ((2.3**2)/(1.1**2))
#Upper Interval
qf(100.05,8,8) * ((2.3**2)/(1.1**2))
#Upper Interval
qf(1-0.05,8,8) * ((2.3**2)/(1.1**2))
#Part(a)
sp = (((9/13)* sd1**2) + ((4/13)*sd2**2))**0.5
qnorm(0.05)
qnorm(0.95)
qnorm(0.05)
qnorm(0.95)
v = (w1+w2)**2/((w1**2)/(9)+(w2**2)/4)
#QS 1
1 - pchisq(12, 7)
#QS 1
1 - pchisq(7, 12)
#QS 1
1 - pchisq(12, 7)
#QS 1
1 - pchisq(12, 14)
#QS 1
1 - pchisq(7, 14)
#QS 1
pchisq(7, 14)
#QS 1
pchisq(14, 7)
#QS 1
1-pchisq(14, 7)
1 - pchisq(32, 17)
#part(b)
beta = pnorm(-1000/(1500/4) + qnorm(0.99))
print(beta)
power = 1 - beta
print(power)
#Lower interval
m1 - m2 - qt(1-0.025, 14)*sp*(3/10)**0.5
#Upper Interval
m1 - m2 + qt(1-0.025, 14)*sp*(3/10)**0.5
len(method_1)
len(method_2)
length(method_2)
length(method_1)
#Lower interval
m1 - m2 - qt(1-0.025, 13)*sp*(3/10)**0.5
#Upper Interval
m1 - m2 + qt(1-0.025, 13)*sp*(3/10)**0.5
#Part(b)
w1 = (sd1**2)/10
w2 = (sd2**2)/5
v = (w1+w2)**2/((w1**2)/(9)+(w2**2)/4)
v = floor(v)
sd_compiled = (w1+w2)**0.5
#Lower Interval
m1 - m2 - qt(1-0.025, v)*sd_compiled
#Upper Interval
m1 - m2 + qt(1-0.025, v)*sd_compiled
qnorm(1)
pnorm(1)
pnorm(-1)
pnorm(-1)*2
pnorm(-2)*2
pnorm(-3)*2
qnorm(0.05)
qnorm(1-.005)
qnorm(1-0.05)
qnorm(0.75)
pnorm(qnorm(0.01/2) + 2/(2/5**0.5))
pnorm(qnorm(1-0.01/2) + 2/(2/5**0.5))
pnorm(-qnorm(1-0.01/2) + 2/(2/5**0.5))
pnorm(-qnorm(1-0.01/2) + 2/(2/5**0.5)) + pnorm(-qnorm(1-0.01/2) + -2/(2/5**0.5))
qnorm(0.01/2)
qnorm(1-0.01/2)
pnorm(-qnorm(1-0.01/2) + 2/(2/5**0.5)) + pnorm(-qnorm(1-0.01/2) + -2/(2/5**0.5))
pnorm(-qnorm(1-0.01/2) + 2/(2/5**0.5)) + pnorm(qnorm(1-0.01/2) + 2/(2/5**0.5))
1- pnorm(-qnorm(1-0.01/2) + 2/(2/5**0.5)) + pnorm(qnorm(1-0.01/2) + 2/(2/5**0.5))
pnorm(-qnorm(1-0.01/2) + 2/(2/5**0.5)) + pnorm(qnorm(1-0.01/2) + 2/(2/5**0.5))
1- (pnorm(-qnorm(1-0.01/2) + 2/(2/5**0.5)) + pnorm(qnorm(1-0.01/2) + 2/(2/5**0.5)))
(pnorm(-qnorm(1-0.01/2) + 2/(2/5**0.5)) + pnorm(qnorm(1-0.01/2) + 2/(2/5**0.5))) - 1
1/3 ((200.01-200)**2 + (199.96-200)**2 + (200.01-200)**2 + (200.02-200)**2 )
1/3 *((200.01-200)**2 + (199.96-200)**2 + (200.01-200)**2 + (200.02-200)**2 )
(1/3 *((200.01-200)**2 + (199.96-200)**2 + (200.01-200)**2 + (200.02-200)**2 ))*0.05
(1/3 *((200.01-200)**2 + (199.96-200)**2 + (200.01-200)**2 + (200.02-200)**2 ))*0.5
(1/3 *(200.01-200)**2 + (199.96-200)**2 + (200.01-200)**2 + (200.02-200)**2 ))*0.5
(1/3 *(200.01-200)**2 + (199.96-200)**2 + (200.01-200)**2 + (200.02-200)**2 )*0.5
(1/3 *((200.01-200)**2 + (199.96-200)**2 + (200.01-200)**2 + (200.02-200)**2 ))*0.5
((1/3 *((200.01-200)**2 + (199.96-200)**2 + (200.01-200)**2 + (200.02-200)**2 )))*0.5
(200.01-200)**2 + (199.96-200)**2 + (200.01-200)**2 + (200.02-200)**2
x = 1/3 * x
x*0.5
(200.01+199.96+200.01+200.02)/4
x = (200.01-200)^2 + (199.96-200)**2 + (200.01-200)**2 + (200.02-200)**2
x = (200.01-200)^2 + (199.96-200)^2 + (200.01-200)^2 + (200.02-200)^2
x = 1/3 * x
x*0.5
x^0.5
# Remove all variables from the R environment to create a fresh start
rm(list=ls())
# Package for linear and integer programming
if(!require(lpSolve)){
install.packages("lpSolve")
library(lpSolve)
}
# ggplot2
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
# GGally (for parallel-coordinate plots)
if(!require(GGally)){
install.packages("GGally")
library(GGally)
}
# Problem 1: maximize power generation
#
# maximize 7750 X1 + 3250 X2 + 2250 X3 + 1050 X4 + 90 X5 (in GWh)
# subject to:
# X1, X2, X3, X4, X5 integers
# X1, X2, X3, X4, X5 represent nuclear plants, coal plants, CCGT plants, wind turbines, solar cells
#
# Define inputs for the function lp -- FILL IN THE LINES BELOW
f.obj_1 <- c(7750, 3250, 2250, 1050, 90)
con_1_1 <- c(248, 206.375, 102.9375, 62.2125, 18.045)
con_2_1 <- c(0, 2.6, 0.7875, 0, 0)
con_3_1 <- c(5.8125, 30.0625, 9.5625, 0.525, 0.045)
con_4_1 <- c(0, 1 , 0, 0, 0)
con_5_1 <- c(0, 0 , 1, 0, 0)
con_6_1 <- c(0, 0 , 0, 1, 0)
con_7_1 <- c(0, 0 , 0, 0, 1)
f.con_1 <- rbind(con_1_1, con_2_1, con_3_1, con_4_1, con_5_1, con_6_1, con_7_1)
f.dir_1 <- c("<=", "<=", "<=", "<=", "<=", "<=", "<=")
f.rhs_1 <- c(3400, 20, 250, 20, 20, 30, 100)
pnorm(8)
qnorm(8)
pnorm(0.2)
1-prnorm(0.2)
1-pnorm(0.2)
1-pnorm(0.4)
pnorm(2.687)
1-pnorm(2.687)
library(shiny); runApp('OneDrive - Singapore University of Technology and Design/SUTD/Year 2/Term 5/40.014 - Engineering Systems Architecture/ESA Project/R Shiny App/R Shiny Application Team 30.R')
runApp('OneDrive - Singapore University of Technology and Design/SUTD/Year 2/Term 5/40.014 - Engineering Systems Architecture/ESA Project/R Shiny App/R Shiny Application Team 30.R')
pnorm(0.8090398)
1-pnorm(0.8090398)
qchisq(0.05,15,lower.tail = FALSE)
qchisq(0.01,d4f,lower.tail = FALSE)
qchisq(0.01,4,lower.tail = FALSE)
2*pnorm(1.014185106)
2*qnorm(1.014185106)
1-qnorm(1.014185106)
1-pnorm(1.014185106)
2*0.1552472
qchisq(0.01,4,lower.tail = FALSE)
#2(a)
coefficients_1a <- matrix (c(4, 2, 4, 2, 1, 0, 0, 1, 4, 2), nrow=5, byrow=TRUE)
targets_1a <- c(48, 32, 7, 10, 32)
objective_1a <- c(1, 2, 3, 4, 5)
priority_1a <- c(1, 2, 3, 4, 2)
p_1a <- c(0, 2, 0, 0, 0)
n_1a <- c(1, 0, 5, 5, 1)
achievements_1a <- data.frame(objective=objective_1a, priority=priority_1a, p=p_1a, n=n_1a)
soln_1a <- llgp(coefficients_1a, targets_1a, achievements_1a)
out_1a <- llgpout(soln_1a$tab, coefficients_1a, targets_1a)
out_1a
rm(list=ls())
library(lpSolve)
library(goalprog)
library(fmsb)
library(nsga2R)
library(ggplot2)
library(rgl)
library(GA)
coefficients_1a <- matrix (c(4, 2, 4, 2, 1, 0, 0, 1, 4, 2), nrow=5, byrow=TRUE)
targets_1a <- c(48, 32, 7, 10, 32)
objective_1a <- c(1, 2, 3, 4, 5)
priority_1a <- c(1, 2, 3, 4, 2)
p_1a <- c(0, 2, 0, 0, 0)
n_1a <- c(1, 0, 5, 5, 1)
achievements_1a <- data.frame(objective=objective_1a, priority=priority_1a, p=p_1a, n=n_1a)
soln_1a <- llgp(coefficients_1a, targets_1a, achievements_1a)
out_1a <- llgpout(soln_1a$tab, coefficients_1a, targets_1a)
out_1a
pnorm(11.6923387)
qnorm(0.97)
qnorm(1-0.03)
unclass(as.Date('1971-01-01'))
MyMat
MyMat = matrix(c(7,9,8,6,10,12), nrow=2, ncol=3,brrow=TRUE)
MyMat = matrix(c(7,9,8,6,10,12), nrow=2, ncol=3,byrow=TRUE)
_VarA
Var2_A
Var2_A
Var2_A = 0
vect
vect <- c(1,2,3)
vect[2] <- "2"
vect
install.packages("swirl")
library(swirl)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
swirl()
swirl()
swirl()
swirl()
1/12
1/36
1/12
info()
swirl()
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
swirl()
11/12
deck
52
4/52
52C5/52^5
choose(52,5)/(]52^5)
choose(52,5)/(52^5)
choose(13,1)/(choose(52,5)
choose(13,1)/choose(52,5)
(choose(13,1)*choose(3,1)*choose(2,1))/choose(52,5)
choose(13,5)*choose(4,1)/choose(52,5)
(choose(13,5)*choose(4,1))/choose(52,5)
33/16660
0.001981
(choose(13,5))/choose(52,5)
choose(13,5)*choose(4,1)/choose(52,5)
(choose(13,5)*choose(4,1))/choose(52,5)
0
12/52
143/153
1/12
11/51
26/153
2/51
0.6
0.64
0.36
0.63
0.64
qe
mypdf
print(3*2)
print(3*2)
plot(cars)
print(3*2)
remove(list = ls())
setwd('/Users/James/Documents/GitHub/Covid-19-Singapore-Exploratory-Analysis')
setwd("~/Documents/GitHub/Covid-19-Singapore-Exploratory-Analysis")
#Importing Relevant libraries
library(ggplot2)  ///
lb
#Importing Relevant libraries
library(ggplot2)  \\\Data Visualization
#Importing Relevant libraries
library(ggplot2)  #Data Visualization
library(readr)
Cases_df <- read_csv("Covid-19 Cases.csv")
View(Cases_df)
library(readr)
Patient_Journey_df <- read_csv("Journey of Covid-19 Patient.csv")
View(Patient_Journey_df)
library(readr)
Tracing_df <- read_csv("Tracing Cases Covid-19.csv")
View(Tracing_df)
summary(Cases_df)
